@using System.Security.Principal
@using Quibble.UI.Core.Services
@inject ILoginHandler LoginHandler
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <BarItem>
            <BarDropdown>
                <BarDropdownToggle style="color: #FFF">
                    @* Using a <Text> Element breaks the ::after arrow *@
                    @GetGreeting(context.User.Identity)
                </BarDropdownToggle>
                <BarDropdownMenu>
                    <BarDropdownItem To="@LoginHandler.ProfileUrl">
                        Profile
                    </BarDropdownItem>
                    <BarDropdownItem Clicked="BeginSignOutAsync">
                        Log out
                    </BarDropdownItem>
                </BarDropdownMenu>
            </BarDropdown>
        </BarItem>
    </Authorized>
    <NotAuthorized>
        <BarItem>
            <BarLink To="@LoginHandler.RegisterUrl">
                <Text Color="TextColor.White">
                    Register
                </Text>
            </BarLink>
        </BarItem>
        <BarItem>
            <BarLink To="@LoginHandler.LoginUrl">
                <Text Color="TextColor.White">
                    Log in
                </Text>
            </BarLink>
        </BarItem>
    </NotAuthorized>
</AuthorizeView>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavigationManager.LocationChanged += NavigationManager_LocationChanged;
    }

    private string GetGreeting(IIdentity? identity)
    {
        return identity?.Name == null ? "Profile" : $"Hey {identity.Name}";
    }

    private Task BeginSignOutAsync() => LoginHandler.BeginSignOutAsync();

    private void NavigationManager_LocationChanged(object? _, LocationChangedEventArgs __) => StateHasChanged();
}