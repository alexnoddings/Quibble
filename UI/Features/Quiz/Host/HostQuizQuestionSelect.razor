
<Accordion>
    @for (int r = 0; r < Quiz.Rounds.Count; r++)
    {
        int capR = r;
        SyncedRound round = Quiz.Rounds[r];
    <Collapse Visible="AccordionSelectedRound == capR">
        <CollapseHeader Padding="Padding.Is0">
            <Button Clicked="() => SelectAccordionRound(capR)" Padding="Padding.Is2" Block="true">
                <Row Margin="Margin.Is0">
                    <Column Padding="Padding.Is0" ColumnSize="ColumnSize.IsAuto">
                        <Text Alignment="TextAlignment.Left" Weight="capR == SelectedRoundNumber ? TextWeight.Bold : TextWeight.Normal">
                            @(capR + 1)
                        </Text>
                    </Column>
                    <Column Padding="Padding.Is0">
                        <Text Alignment="TextAlignment.Left" class="text-truncate">
                            : @round.Title
                        </Text>
                    </Column>
                    @if (round.State == RoundState.Hidden)
                        {
                    <Column Padding="Padding.Is0" ColumnSize="ColumnSize.IsAuto">
                        <Icon Name="IconName.EyeSlash" />
                    </Column>
                    }
                </Row>
            </Button>
        </CollapseHeader>
        <CollapseBody Padding="Padding.Is0">
            <ListGroup Flush="true">
                @for (var q = 0; q < round.Questions.Count; q++)
                    {
                        SyncedQuestion question = round.Questions[q];
                        int capQ = q;
                <ListGroupItem Active="capR == SelectedRoundNumber && capQ == SelectedQuestionNumber" Padding="Padding.Is0">
                    <Button Block="true" Clicked="() => SelectQuestion(capR, capQ)">
                        <Row Margin="Margin.Is0">
                            <Column Padding="Padding.Is0" ColumnSize="ColumnSize.IsAuto">
                                <Text Alignment="TextAlignment.Left" Weight="capR == SelectedRoundNumber && capQ == SelectedQuestionNumber ? TextWeight.Bold : TextWeight.Normal">
                                    @(capR + 1).@(capQ + 1)
                                </Text>
                            </Column>
                            <Column Padding="Padding.Is0">
                                <Text Alignment="TextAlignment.Left" class="text-truncate">
                                    : @question.QuestionText
                                </Text>
                            </Column>
                            <Column Padding="Padding.Is0" ColumnSize="ColumnSize.IsAuto">
                                @{
                                    var icon = question.State switch
                                            {
                                                QuestionState.Hidden => IconName.EyeSlash,
                                                QuestionState.Visible => IconName.Eye,
                                                QuestionState.Locked => IconName.Lock,
                                                _ => IconName.Check,
                                            };
                                    <Icon Name="icon" />
                                }
                            </Column>
                        </Row>
                    </Button>
                </ListGroupItem>
                }
            </ListGroup>
        </CollapseBody>
    </Collapse>
    }
</Accordion>