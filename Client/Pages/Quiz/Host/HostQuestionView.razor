<Card>
    <CardBody>
        <Row>
            <Column ColumnSize="ColumnSize.Is3.Is2.OnWidescreen">
                <Button Block="true" Color="Color.Secondary" Outline="true" Clicked="Selection.MoveToPreviousQuestionAsync" Disabled="Selection.IsAtFirstQuestion">
                    <Icon Name="IconName.ChevronLeft" Margin="Margin.Is1.FromRight" />
                    Previous
                </Button>
            </Column>
            <Column ColumnSize="ColumnSize.Is6.Is8.OnWidescreen" Display="Display.Flex.Column" Class="align-items-center">
                <Heading Size="HeadingSize.Is5" Margin="Margin.IsAuto.OnX.Is0.OnY" Alignment="TextAlignment.Center">
                    @($"Round {Selection.RoundNumber + 1}. {Selection.Round.Title}")
                </Heading>
                <Heading Size="HeadingSize.Is5" Margin="Margin.IsAuto.OnX.Is0.OnY" Alignment="TextAlignment.Center">
                    @($"Question {Selection.QuestionNumber + 1}")
                </Heading>
            </Column>
            <Column ColumnSize="ColumnSize.Is3.Is2.OnWidescreen">
                <Button Block="true" Color="Color.Secondary" Outline="true" Clicked="Selection.MoveToNextQuestionAsync" Disabled="Selection.IsAtLastQuestion">
                    Next
                    <Icon Name="IconName.ChevronRight" Margin="Margin.Is1.FromLeft" />
                </Button>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.Is12.Is10.OnDesktop.Is1.WithOffset.OnDesktop" Margin="Margin.Is3.OnY">
                @{
                    var isQuestionHidden = Selection.Question.State == QuestionState.Hidden;
                    <Blazorise.Text Display="Display.Block" Color="isQuestionHidden ? TextColor.Muted : TextColor.None" Margin="Margin.Is1.OnY.Is4.OnX">
                        @if (isQuestionHidden)
                        {
                            <Icon Name="IconName.EyeSlash" Margin="@Margin.Is1.FromRight.Is("ml-n4")" />
                        }
                        @Selection.Question.Text
                    </Blazorise.Text>

                    var isAnswerHidden = Selection.Question.State < QuestionState.AnswerRevealed;
                    <Blazorise.Text Display="Display.Block" Color="isAnswerHidden ? TextColor.Muted : TextColor.None" Margin="Margin.Is1.OnY.Is4.OnX">
                        @if (isAnswerHidden)
                        {
                            <Icon Name="IconName.EyeSlash" Margin="@Margin.Is1.FromRight.Is("ml-n4")" />
                        }
                        @Selection.Question.Answer
                    </Blazorise.Text>
                }
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.Is12.Is10.OnFullHD.Is1.WithOffset.OnFullHD">
                <Row>
                    @{
                        bool isRoundHidden = Selection.Round.State == RoundState.Hidden;
                        <Column ColumnSize="ColumnSize.IsQuarter">
                            @{
                                bool canShowRound = isRoundHidden;
                                bool canShowOtherRounds = Quiz.Rounds.Except(Selection.Round).Any(round => round.State == RoundState.Hidden);
                                <Dropdown Display="Display.Flex" RightAligned="true" Disabled="!canShowOtherRounds">
                                    <Button Block="true" Color="Color.Secondary" Clicked="Selection.Round.OpenAsync" Outline="!canShowRound" Disabled="!canShowRound">
                                        Show Round
                                    </Button>
                                    <DropdownToggle Split="true" Color="Color.Secondary" Outline="!canShowOtherRounds" />
                                    <DropdownMenu>
                                        <DropdownItem Clicked="ShowAllRoundsAsync">
                                            Show all rounds in quiz
                                        </DropdownItem>
                                    </DropdownMenu>
                                </Dropdown>
                            }
                        </Column>
                        <Column ColumnSize="ColumnSize.IsQuarter">
                            @{
                                bool canShowQuestion = !isRoundHidden && Selection.Question.State == QuestionState.Hidden;
                                bool canShowOtherQuestions = !isRoundHidden && Selection.Round.Questions.Except(Selection.Question).Any(question => question.State == QuestionState.Hidden);
                                <Dropdown Display="Display.Flex" RightAligned="true" Disabled="!canShowOtherQuestions">
                                    <Button Block="true" Color="Color.Secondary" Clicked="Selection.Question.OpenAsync" Outline="!canShowQuestion" Disabled="!canShowQuestion">
                                        Show Question
                                    </Button>
                                    <DropdownToggle Split="true" Color="Color.Secondary" Outline="!canShowOtherQuestions" />
                                    <DropdownMenu>
                                        <DropdownItem Clicked="ShowAllQuestionsInRoundAsync">
                                            Show all questions in round
                                        </DropdownItem>
                                    </DropdownMenu>
                                </Dropdown>
                            }
                        </Column>
                        <Column ColumnSize="ColumnSize.IsQuarter">
                            @{
                                bool canLockQuestion = Selection.Question.State == QuestionState.Open;
                                bool canLockOtherQuestions = Selection.Round.Questions.Except(Selection.Question).Any(question => question.State == QuestionState.Open);
                                <Dropdown Display="Display.Flex" RightAligned="true" Disabled="!canLockOtherQuestions">
                                    <Button Block="true" Color="Color.Secondary" Clicked="Selection.Question.LockAsync" Outline="!canLockQuestion" Disabled="!canLockQuestion">
                                        Lock Answers
                                    </Button>
                                    <DropdownToggle Split="true" Color="Color.Secondary" Outline="!canLockOtherQuestions" />
                                    <DropdownMenu>
                                        <DropdownItem Clicked="LockAllQuestionsInRoundAsync">
                                            Lock all questions in round
                                        </DropdownItem>
                                    </DropdownMenu>
                                </Dropdown>
                            }
                        </Column>
                        <Column ColumnSize="ColumnSize.IsQuarter">
                            @{
                                bool canShowAnswer = Selection.Question.State == QuestionState.Locked;
                                bool canShowOtherAnswers = Selection.Round.Questions.Except(Selection.Question).Any(question => question.State == QuestionState.Locked);
                                <Dropdown Display="Display.Flex" RightAligned="true" Disabled="!canShowOtherAnswers">
                                    <Button Block="true" Color="Color.Secondary" Clicked="Selection.Question.ShowAnswer" Outline="!canShowAnswer" Disabled="!canShowAnswer">
                                        Show Answer
                                    </Button>
                                    <DropdownToggle Split="true" Color="Color.Secondary" Outline="!canShowOtherAnswers" />
                                    <DropdownMenu>
                                        <DropdownItem Clicked="ShowAllQuestionAnswersInRoundAsync">
                                            Show all answers in round
                                        </DropdownItem>
                                    </DropdownMenu>
                                </Dropdown>
                            }
                        </Column>
                    }
                </Row>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.IsFull">
                <Divider DividerType="DividerType.TextContent" Text="Answers" Margin="Margin.Is4.FromTop" />
            </Column>
            <Column>
                <Column ColumnSize="ColumnSize.IsFull">
                    @* ToDo: add answer view *@
                </Column>
            </Column>
        </Row>
    </CardBody>
</Card>
