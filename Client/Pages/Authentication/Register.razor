@page "/auth/register"
@using System.ComponentModel.DataAnnotations
@using BlazorIdentityBase.Client.Services
@using BlazorIdentityBase.Shared.Authentication

<h2>Register</h2>

<AuthorizeView>
    <Authorized>
        <RedirectTo Url="@ReturnUrl" />
    </Authorized>
</AuthorizeView>

@if (Errors != null)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}

<EditForm Model="Model" OnValidSubmit="RegisterAsync" class="card card-body bg-light my-4">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">
            Email
        </label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="Model.Email" type="email" autocomplete="email" />
            <ValidationMessage For="() => Model.Email" />
        </div>
    </div>
    <div class="form-group row">
        <label for="username" class="col-md-2 col-form-label">
            Username
        </label>
        <div class="col-md-10">
            <InputText id="username" class="form-control" @bind-Value="Model.UserName" autocomplete="username" />
            <ValidationMessage For="() => Model.UserName" />
        </div>
    </div>
    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">
            Password
        </label>
        <div class="col-md-10">
            <InputText id="password" class="form-control" @bind-Value="Model.Password" type="password" autocomplete="new-password" />
            <ValidationMessage For="() => Model.Password" />
        </div>
    </div>
    <div class="form-group row">
        <label for="confirmPassword" class="col-md-2 col-form-label">
            Confirm Password
        </label>
        <div class="col-md-10">
            <InputText id="confirmPassword" class="form-control" @bind-Value="Model.ConfirmPassword" type="password" autocomplete="new-password" />
            <ValidationMessage For="() => Model.ConfirmPassword" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-primary btn-block" disabled="@IsSubmitting">
                Register
            </button>
        </div>
    </div>
    <a href="/auth/login?returnUrl=@ReturnUrl">Login</a>
    <a href="/auth/forgotPassword">Forgot Password</a>
</EditForm>

@code
{
    [Inject]
    public IdentityAuthenticationStateProvider AuthenticationProvider { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private class RegisterModel : RegisterRequest
    {
        [Required]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }

    private RegisterModel Model { get; } = new();

    private IList<string>? Errors { get; set; }

    private string ReturnUrl { get; set; }

    private bool IsSubmitting { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        ReturnUrl = NavigationManager.GetQueryParameter("returnUrl", "/");

        // Only return to a well-formed relative url
        if (!Uri.IsWellFormedUriString(ReturnUrl, UriKind.Relative))
            ReturnUrl = "/";
    }

    private async Task RegisterAsync()
    {
        IsSubmitting = true;

        var result = await AuthenticationProvider.RegisterAsync(Model.UserName, Model.Email, Model.Password);
        if (result.WasSuccessful)
            NavigationManager.NavigateTo(ReturnUrl);
        else
            Errors = result.Errors?.ToList() ?? new List<string>();

        IsSubmitting = false;
    }
}