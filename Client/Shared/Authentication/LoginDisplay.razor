
<AuthorizeView>
    <Authorized>
        <a href="/auth/profile">@context.User.Identity.Name</a>
        <a href="/auth/logout">Log out</a>
    </Authorized>
    <NotAuthorized>
        @* These are links so that they can be opened in a new tab, but opening in the current will instead navigate through NavigationManager. *@
        <a href="/auth/register" @onclick="RedirectToRegister" @onclick:preventDefault>Register</a>
        <a href="/auth/login" @onclick="RedirectToLogin" @onclick:preventDefault>Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private void RedirectToLogin() => RedirectTo("login");
    private void RedirectToRegister() => RedirectTo("register");

    private void RedirectTo(string page)
    {
        var relativeUrl = NavigationManager.GetRelativeUrl();
        if (relativeUrl == string.Empty || relativeUrl == "/")
            // Allow register page to redirect back home
            NavigationManager.NavigateTo("/auth/" + page);
        else if (!relativeUrl.Contains("auth/", StringComparison.OrdinalIgnoreCase))
            // Only navigate if not on an auth page
            NavigationManager.NavigateTo("/auth/" + page + "?returnUrl=" + Uri.EscapeDataString(relativeUrl));
    }

}