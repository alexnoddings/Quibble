@using BlazorIdentityBase.Client.Services
@using BlazorIdentityBase.Shared.Authentication
@using System.ComponentModel.DataAnnotations

<h2>Change Password</h2>

@if (Errors != null)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}

@if (WasSuccessful)
{
    <div class="alert alert-success" role="alert">
        <p>Password changed.</p>
    </div>
}

<EditForm Model="Model" OnValidSubmit="ChangePasswordAsync" class="card card-body bg-light my-4">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="currentPassword" class="col-md-2 col-form-label">
            Current Password
        </label>
        <div class="col-md-10">
            <InputText id="currentPassword" class="form-control" @bind-Value="Model.CurrentPassword" type="password" />
            <ValidationMessage For="() => Model.CurrentPassword" />
        </div>
    </div>
    <div class="form-group row">
        <label for="newPassword" class="col-md-2 col-form-label">
            New Password
        </label>
        <div class="col-md-10">
            <InputText id="newPassword" class="form-control" @bind-Value="Model.NewPassword" type="password" autocomplete="off" />
            <ValidationMessage For="() => Model.NewPassword" />
        </div>
    </div>
    <div class="form-group row">
        <label for="confirmPassword" class="col-md-2 col-form-label">
            Confirm Password
        </label>
        <div class="col-md-10">
            <InputText id="confirmPassword" class="form-control" @bind-Value="Model.ConfirmPassword" type="password" autocomplete="off" />
            <ValidationMessage For="() => Model.ConfirmPassword" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-primary btn-block">
                Change Password
            </button>
        </div>
    </div>
</EditForm>

@code
{
    [Inject]
    public IdentityAuthenticationStateProvider AuthenticationProvider { get; set; }

    private class ChangePasswordModel : ChangePasswordRequest
    {
        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }

    private ChangePasswordModel Model { get; } = new();

    private IList<string>? Errors { get; set; }

    private bool WasSuccessful { get; set; }

    private async Task ChangePasswordAsync()
    {
        Errors = null;

        var result = await AuthenticationProvider.ChangePasswordAsync(Model.CurrentPassword, Model.NewPassword);
        WasSuccessful = result.WasSuccessful;
        if (!WasSuccessful)
            Errors = result.Errors?.ToList() ?? new List<string>();
    }
}
