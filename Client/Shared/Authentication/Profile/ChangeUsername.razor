@using BlazorIdentityBase.Client.Services
@using BlazorIdentityBase.Shared.Authentication

<h2>Change Username</h2>

@if (Errors != null)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}

@if (WasSuccessful)
{
    <div class="alert alert-success" role="alert">
        <p>Username updated.</p>
    </div>
}

<EditForm Model="Model" OnValidSubmit="ChangeUsernameAsync" class="card card-body bg-light my-4">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="currentUsername" class="col-md-2 col-form-label">
            Current Username
        </label>
        <div class="col-md-10">
            <input id="currentUsername" class="form-control" value="@CurrentUsername" disabled />
        </div>
    </div>
    <div class="form-group row">
        <label for="newUsername" class="col-md-2 col-form-label">
            New Username
        </label>
        <div class="col-md-10">
            <InputText id="newUsername" class="form-control" @bind-Value="Model.NewUsername" autocomplete="off" />
            <ValidationMessage For="() => Model.NewUsername" />
        </div>
    </div>
    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">
            Password
        </label>
        <div class="col-md-10">
            <InputText id="password" class="form-control" @bind-Value="Model.Password" type="password" />
            <ValidationMessage For="() => Model.Password" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-primary btn-block" disabled="@IsSubmitting">
                Change Username
            </button>
        </div>
    </div>
</EditForm>

@code
{
    [Inject]
    public IdentityAuthenticationStateProvider AuthenticationProvider { get; set; }

    private class ChangeUsernameModel : ChangeUsernameRequest
    {
    }

    private ChangeUsernameModel Model { get; } = new();

    private IList<string>? Errors { get; set; }

    private bool WasSuccessful { get; set; }

    private string CurrentUsername { get; set; }

    private bool IsSubmitting { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        CurrentUsername = (await AuthenticationProvider.GetAuthenticationStateAsync()).User?.Identity?.Name;
    }

    private async Task ChangeUsernameAsync()
    {
        IsSubmitting = true;

        var result = await AuthenticationProvider.ChangeUsernameAsync(Model.Password, Model.NewUsername);
        WasSuccessful = result.WasSuccessful;
        if (WasSuccessful)
            Errors = null;
        else
            Errors = result.Errors?.ToList() ?? new List<string>();

        IsSubmitting = false;
    }
}
