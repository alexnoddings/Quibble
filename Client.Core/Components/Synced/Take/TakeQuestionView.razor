@inherits SyncedEntityComponent

<Fields Class="align-items-center">
    <Field ColumnSize="ColumnSize.Is12.Is7.OnWidescreen" Display="Display.Flex">
        <Text Color="TextColor.Muted" Margin="Margin.Is2.FromRight">
            @(Question.Order + 1).
        </Text>
        <Text Class="@("text-break" + (Question.State == QuestionState.Open ? " user-select-none" : null))">
            @Question.Text
        </Text>
    </Field>
    <Field ColumnSize="ColumnSize.Is10.Is4.OnWidescreen" Display="Display.Flex.Column">
        @{
            var answer = Question.TryGetCurrentUsersAnswer();
            if (Question.State == QuestionState.Open)
            {
                if (answer is null)
                {
                    <text>N/A</text>
                }
                else
                {
                    <SynchronisedTextEdit Text="@answer.Text"
                              SaveFunction="answer.UpdateTextAsync"
                              PreviewFunction="answer.PreviewUpdateTextAsync"
                              MaxLength="200" />
                }
            }
            else if (Question.State == QuestionState.Locked)
            {
                bool wasEmptyAnswer = string.IsNullOrEmpty(answer?.Text);
                <Blazorise.Text Italic="wasEmptyAnswer" Color="TextColor.Muted">
                    <Icon Name="IconName.Lock" Margin="Margin.Is1.FromRight" />
                    @(wasEmptyAnswer ? "No answer" : answer?.Text)
                </Blazorise.Text>
            }
            else
            {
                bool wasEmptyAnswer = string.IsNullOrEmpty(answer?.Text);
                <Blazorise.Text Italic="wasEmptyAnswer" Display="Display.Flex" Class="text-break">
                    @if (answer is not null && answer.AssignedPoints > Question.Points)
                    {
                        <Blazorise.Text Color="TextColor.Info">
                            <Icon  Name="IconName.Check" Margin="Margin.Is1.FromRight" />
                        </Blazorise.Text>
                    }
                    else if (answer is not null && answer.AssignedPoints == Question.Points)
                    {
                        <Blazorise.Text Color="TextColor.Success">
                            <Icon  Name="IconName.Check" Margin="Margin.Is1.FromRight" />
                        </Blazorise.Text>
                    }
                    else if (answer is not null && answer.AssignedPoints > 0)
                    {
                        <Blazorise.Text Color="TextColor.Warning">
                            <Icon Name="IconName.MoreHorizontal" Margin="Margin.Is1.FromRight" />
                        </Blazorise.Text>
                    }
                    else
                    {
                        <Blazorise.Text Color="TextColor.Danger">
                            <Icon Name="IconName.Times" Margin="Margin.Is1.FromRight" />
                        </Blazorise.Text>
                    }
                    @(wasEmptyAnswer ? "No answer" : answer?.Text)
                </Blazorise.Text>
                <Blazorise.Text Color="TextColor.Muted" Display="Display.Flex" Class="text-break">
                    <Blazorise.Text>
                        <Icon Name="IconName.AngleRight" Margin="Margin.Is1.FromLeft.Is2.FromRight" />
                    </Blazorise.Text>
                    @Question.Answer
                </Blazorise.Text>
            }
        }
    </Field>
    <Field ColumnSize="ColumnSize.Is2.Is1.OnWidescreen">
        @{
            var questionPoints = Question.Points;
            if (Question.State < QuestionState.AnswerRevealed)
            {
                <Blazorise.Text Alignment="TextAlignment.Center">
                    @($"{questionPoints:G4}")
                </Blazorise.Text>
            }
            else
            {
                var assignedPoints = Question.TryGetCurrentUsersAnswer()?.AssignedPoints ?? -1;
                if (assignedPoints >= 0)
                {
                    TextColor textColour;
                    if (assignedPoints == 0)
                        textColour = TextColor.Danger;
                    else if (assignedPoints < questionPoints)
                        textColour = TextColor.Warning;
                    else if (assignedPoints == questionPoints)
                        textColour = TextColor.Success;
                    else
                        textColour = TextColor.Info;
                    <Blazorise.Text Alignment="TextAlignment.Center" Color="textColour">
                        @($"{assignedPoints:G4}/{questionPoints:G4}")
                    </Blazorise.Text>
                }
                else
                {
                    <Blazorise.Text Alignment="TextAlignment.Center" Color="TextColor.Muted">
                        @($"-/{questionPoints:G4}")
                    </Blazorise.Text>
                }
            }
        }
    </Field>
</Fields>
