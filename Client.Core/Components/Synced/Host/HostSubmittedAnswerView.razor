@inherits SyncedEntityComponent

<Card Class="@CardClass" Background="Background.Light" Border="Border.Is0.OnBottom" Style="border-bottom-left-radius: 0; border-bottom-right-radius: 0;">
    <CardHeader Padding="Padding.Is1" Background="Background.Transparent" Class="border-muted" TextAlignment="TextAlignment.Center">
        @SubmittedAnswer.Submitter.UserName
    </CardHeader>
    <CardBody Padding="Padding.Is3.OnX.Is2.OnY" Background="Background.Transparent">
        @if (SubmittedAnswer.Question.State == QuestionState.Hidden)
        {
            <Blazorise.Text Display="Display.Block">
                &nbsp;
            </Blazorise.Text>
        }
        else if (string.IsNullOrWhiteSpace(SubmittedAnswer.Text))
        {
            if (SubmittedAnswer.Question.State == QuestionState.Open)
            {
                <Blazorise.Text Display="Display.Block" Color="TextColor.Muted" Italic="true">
                    *thinking*
                </Blazorise.Text>
            }
            else
            {
                <Blazorise.Text Display="Display.Block" Color="TextColor.Muted" Italic="true">
                    No answer
                </Blazorise.Text>
            }
        }
        else
        {
            <Blazorise.Text Display="Display.Block">
                @SubmittedAnswer.Text
            </Blazorise.Text>
        }
    </CardBody>
</Card>
<Buttons Display="Display.Flex">
    @if (SubmittedAnswer.Question.State < QuestionState.Locked)
    {
        <Button Disabled="true" Border="Border.Dark.OnBottom.Is0.OnTop" Style="border-top-left-radius: 0; border-top-right-radius: 0;">
            &nbsp;
        </Button>
    }
    else
    {
        <Button Outline="SubmittedAnswer.AssignedPoints != 0"
            Color="Color.Danger"
            Class="text-clip align-items-center"
            Display="Display.Flex.Column"
            Style="@("border-top-left-radius: 0; " + (IsExpanded ? "border-bottom-left-radius: 0;" : string.Empty))"
            Clicked="() => SubmittedAnswer.MarkAsync(0)">
            0pts
        </Button>
        bool isAssignedCustomPoints = SubmittedAnswer.AssignedPoints > 0
                && SubmittedAnswer.AssignedPoints != SubmittedAnswer.Question.Points;
        <Button Outline="!isAssignedCustomPoints"
                Color="isAssignedCustomPoints 
                        && SubmittedAnswer.AssignedPoints > SubmittedAnswer.Question.Points
                        ? Color.Info
                        : Color.Warning"
                Style="border-top-right-radius: 0;"
                Class="justify-content-center"
                Display="Display.Flex.Column"
                Clicked="() => IsExpanded = !IsExpanded">
            @if (isAssignedCustomPoints)
            {
                // Show points if a custom ammount is assigned
                @($"{SubmittedAnswer.AssignedPoints:G4}pts")
            }
            else
            {
                <Icon Name="IconName.MoreHorizontal" />
            }
        </Button>
        <Button Outline="SubmittedAnswer.AssignedPoints != SubmittedAnswer.Question.Points"
            Color="Color.Success"
            Style="@("border-top-right-radius: 0;" + (IsExpanded ? "border-bottom-right-radius: 0;" : string.Empty))"
            Class="text-clip align-items-center"
            Display="Display.Flex.Column"
            Clicked="() => SubmittedAnswer.MarkAsync(SubmittedAnswer.Question.Points)">
            @($"{SubmittedAnswer.Question.Points:G4}pts")
        </Button>
    }
</Buttons>
<Div Display="IsExpanded ? Display.Always : Display.None">
    <NumericEdit TValue="decimal"
                    Value="LocalPoints"
                    ValueChanged="RoundAndUpdatePointsAsync"
                    Min="0m"
                    Max="10m"
                    Step="0.25m"
                    Display="Display.Flex.Column"
                    Border="Border.RoundedZero.Is0.OnBottom.Is0.OnTop"
                    Margin="Margin.Is0.FromBottom"
                    TextAlignment="TextAlignment.Center" />
    <Buttons Display="Display.Flex">
        <Button Color="Color.Primary" Outline="true" Clicked="() => SubmittedAnswer.MarkAsync(0.25m)" Style="border-top-left-radius: 0;">&#188;</Button>
        <Button Color="Color.Primary" Outline="true" Clicked="() => SubmittedAnswer.MarkAsync(0.5m)">&#189;</Button>
        <Button Color="Color.Primary" Outline="true" Clicked="() => SubmittedAnswer.MarkAsync(1m)">1</Button>
        <Button Color="Color.Primary" Outline="true" Clicked="() => SubmittedAnswer.MarkAsync(2m)" Style="border-top-right-radius: 0;">2</Button>
    </Buttons>
</Div>