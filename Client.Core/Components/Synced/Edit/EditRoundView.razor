@using Quibble.Client.Core.Components.Modals
@inherits SyncedEntityComponent

<Card Background="Background.Light" Margin="Margin.Is3.OnY">
    <CardBody>
        <Fields Margin="Margin.Is3.FromBottom">
            <Field ColumnSize="ColumnSize.Is10.Is11.OnFullHD" Margin="Margin.Is0.FromBottom" Display="Display.Flex">
                <Text Color="TextColor.Muted" Display="Display.InlineFlex.Column" Alignment="TextAlignment.Center" Class="justify-content-center"  Margin="Margin.Is2.FromRight">
                    @(Round.Order + 1).
                </Text>
                <div class="flex-fill">
                    <SynchronisedTextEdit Text="@Round.Title" SaveFunction="Round.UpdateTitleAsync" Size="Size.Large" MaxLength="100" />
                </div>
            </Field>
            <Field ColumnSize="ColumnSize.Is2.Is1.OnFullHD" Margin="Margin.Is0.FromBottom">
                <Button Block="true" Outline="true" Color="Color.Danger" @onclick="OnDeleteClickedAsync" Class="h-100">
                    <Icon Name="IconName.Delete" Display="Display.None.InlineBlock.OnDesktop" />
                    <Text Class="text-sm" Display="Display.InlineBlock">
                        Delete
                    </Text>
                </Button>
            </Field>
        </Fields>
        @if (Round.Questions.Any())
        {
            <Fields Display="Display.None.Flex.Row.OnWidescreen">
                <Field ColumnSize="ColumnSize.Is5.Is6.OnFullHD" Margin="Margin.Is0.FromBottom" Padding="Padding.Is4.FromLeft">
                    <FieldLabel Margin="Margin.Is3.FromLeft">
                        Question
                    </FieldLabel>
                </Field>
                <Field ColumnSize="ColumnSize.Is4" Margin="Margin.Is0.FromBottom" Padding="Padding.Is3.FromLeft">
                    <FieldLabel Margin="Margin.Is1.FromLeft">
                        Answer
                    </FieldLabel>
                </Field>
                <Field ColumnSize="ColumnSize.Is1" Margin="Margin.Is0.FromBottom" Padding="Padding.Is3.FromLeft">
                    <FieldLabel Margin="Margin.Is1.FromLeft">
                        Points
                    </FieldLabel>
                </Field>
            </Fields>
        }
        @{
            foreach (var question in Round.Questions)
            {
                <EditQuestionView Question="question" @key="question.Id" />
            }
        }
        <Fields>
            <Field ColumnSize="ColumnSize.Is4.Is4.WithOffset.OnMobile.Is2.OnWidescreen.Is5.WithOffset.OnWidescreen" Margin="Margin.Is0.OnY">
                <Dropdown Class="w-100" Direction="Direction.Right">
                    <Button Block="true" Color="Color.Primary" Outline="true" Clicked="() => AddQuestionsAsync(1)">
                        Add Question
                    </Button>
                    <DropdownToggle Color="Color.Primary" Outline="true" Split="true">
                        &nbsp;
                    </DropdownToggle>
                    <DropdownMenu>
                        <DropdownItem Clicked="() => AddQuestionsAsync(5)">
                            x5
                        </DropdownItem>
                        <DropdownItem Clicked="() => AddQuestionsAsync(10)">
                            x10
                        </DropdownItem>
                    </DropdownMenu>
                </Dropdown>
            </Field>
        </Fields>
    </CardBody>
</Card>

<OptionsModal TValue="bool" @ref="ConfirmDeleteModal" Title="Delete round">
    <Body>
        <Paragraph Margin="Margin.Is1.OnY">
            Are you sure you want to delete this round?
        </Paragraph>
        @if (!string.IsNullOrWhiteSpace(Round.Title))
        {
            <Paragraph Margin="Margin.Is3.FromLeft.Is1.OnY">
                @Round.Title
            </Paragraph>
        }
        <Paragraph Margin="Margin.Is1.OnY" Color="TextColor.Muted" Italic="true">
            You can skip this confirmation by holding shift when you click delete.
        </Paragraph>
    </Body>
    <Footer Context="Options">
        <Button Color="Color.Dark" Clicked="() => Options.Choose(false)" Outline="true" Margin="Margin.Is2.FromRight">
            Cancel
        </Button>
        <Button Color="Color.Danger" Clicked="() => Options.Choose(true)">
            Delete
        </Button>
    </Footer>
</OptionsModal>
